# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['Telescope', 'cleanup']

# %% ../00_core.ipynb 3
import logging
from requests import session
from bs4 import BeautifulSoup
import configparser
from os.path import expanduser
import json
from fastcore.basics import patch
from zipfile import ZipFile, BadZipFile
from tqdm.auto import tqdm
import sys
import os
import time
from astropy.coordinates import SkyCoord, Longitude, Latitude

# %% ../00_core.ipynb 5
class Telescope :

    url='https://www.telescope.org/'
    cameratypes={
        'constellation':'1',
        'galaxy':       '2',
        'cluster':      '3',
        'planet':'5',
        'coast':'6',
        'pirate':'7',
    }

    REQUESTSTATUS_TEXTS={
        1: "New",
        2: "New, allocated",
        3: "Waiting",
        4: "In progress",
        5: "Reallocate",
        6: "Waiting again",
        7: "Complete on site",
        8: "Complete",
        9: "Hold",
        10: "Frozen",
        20: "Expired",
        21: "Expired w/CJobs",
        22: "Cancelled",
        23: "Cancelled w/CJobs",
        24: "Invalid",
        25: "Never rises",
        26: "Other error",
    }

    def __init__(self,user,passwd,cache='.cache/jobs'):
        self.s=None
        self.user=user
        self.passwd=passwd
        self.tout=60
        self.retry=15
        self.login()
        self.cache=cache

# %% ../00_core.ipynb 6
def cleanup(s):
    return s.encode('ascii','ignore').decode('ascii','ignore')

# %% ../00_core.ipynb 8
@patch
def login(self: Telescope):
    log = logging.getLogger(__name__)
    payload = {'action': 'login',
               'username': self.user,
               'password': self.passwd,
               'stayloggedin': 'true'}
    log.debug('Get session ...')
    self.s=session()
    log.debug('Logging in ...')
    self.s.post(self.url+'login.php', data=payload)

# %% ../00_core.ipynb 9
@patch
def logout(self: Telescope):
    if self.s is None :
        self.s.post(self.url+'logout.php')
        self.s=None
 

# %% ../00_core.ipynb 12
@patch
def get_user_requests(self: Telescope, sort='rid', folder=1):
    '''
    Get all user requests from folder (Inbox=1 by default),
    sorted by sort column ('rid' by default). 
    Possible sort columns are: 'rid', 'object', 'completion'
    The data is returned as a list of dictionaries.
    '''

    #fetch first batch        
    params={
        'limit': 100,
        'sort': sort,
        'folderid': folder}

    rq = self.s.post(self.url+"api-user.php", {'module': "request-manager", 
                                               'request': "1-get-list-own",
                                               'params' : json.dumps(params)})
    res=[]
    dat=json.loads(rq.content)
    total=int(dat['data']['totalRequests'])
    res+=dat['data']['requests']

    # Fetch the rest
    params['limit']=total-len(res)
    params['startAfterRow']=len(res)
    rq = self.s.post(self.url+"api-user.php", {'module': "request-manager", 
                                               'request': "1-get-list-own",
                                               'params' : json.dumps(params)})

    dat=json.loads(rq.content)
    total=int(dat['data']['totalRequests'])
    res+=dat['data']['requests']
    return res

# %% ../00_core.ipynb 14
@patch
def get_request(self: Telescope, rid=None):
    '''Get request data for a given RID'''

    assert(rid is not None)
    assert(self.s is not None)

    log = logging.getLogger(__name__)
    log.debug(rid)

    obs={}
    obs['rid']=rid
    #rq=self.s.post(self.url+('v3cjob-view.php?jid=%d' % jid))
    rq=self.s.post(self.url+('v4request-view.php?rid=%d' % rid))
    soup = BeautifulSoup(rq.text, 'lxml')
    for l in soup.findAll('tr'):
        log.debug(cleanup(l.text))
        txt=''
        for f in l.findAll('td'):
            if txt.find('Job ID') >= 0:
                obs['jid']=f.text
            if txt.find('Object Type') >= 0:
                obs['type']=f.text
            if txt.find('Object ID') >= 0:
                obs['oid']=f.text
            if txt.find('Object Name') >= 0:
                obs['name']=f.text
            if txt.find('Telescope Type Name') >= 0:
                obs['tele_type']=f.text
            if txt.find('Telescope Name') >= 0:
                obs['tele']=f.text
            if txt.find('Filter Type') >= 0:
                obs['filter']=f.text
            if txt.find('Dark Frame') >= 0:
                obs['dark']=f.text
            if txt.find('Exposure Time') >= 0:
                obs['exp']=f.text
            if txt.find('Request Time') >= 0:
                t=f.text.split()
                obs['requested']=t[3:6]+[t[6][1:]]+[t[7][:-1]]
            if txt.find('Completion Time') >= 0:
                t=f.text.split()
                obs['completion']=t[3:6]+[t[6][1:]]+[t[7][:-1]]
            if txt.find('Status') >= 0:
                obs['status']= f.text.strip() #(f.text == 'Success')

            txt=f.text
    for l in soup.findAll('a'):
        if l.get('href')is not None and ('dl-flat' in l.get('href')):
            obs['flatid']=int(l.get('href').split('=')[1])
            break
    log.info('%(jid)d [%(tele)s, %(filter)s, %(status)s]: %(type)s %(oid)s %(exp)s', obs)

    return obs    

# %% ../00_core.ipynb 15
@patch
def get_user_folders(self: Telescope):
    '''
    Get all user folders. Returns list of dictionaries.
    '''
    rq = self.s.post(self.url+"api-user.php", {'module': "request-manager", 
                                               'request': "0-get-my-folders"})
    return json.loads(rq.content)['data']

# %% ../00_core.ipynb 17
@patch
def get_obs_list(self: Telescope, t=None, dt=1, filtertype='', camera='', hour=16, minute=0):
    '''Get the dt days of observations taken no later then time in t.

        Input
        ------
        t  - end time in seconds from the epoch
            (as returned by time.time())
        dt - number of days, default to 1
        filtertype - filter by type of filter used
        camera - filter by the camera/telescope used

        Output
        ------
        Returns a list of JobIDs (int) for the observations.

    '''

    assert(self.s is not None)

    if t is None :
        t=time.time()-time.timezone


    st=time.gmtime(t-86400*dt)
    et=time.gmtime(t)

    d=st.tm_mday
    m=st.tm_mon
    y=st.tm_year
    de=et.tm_mday
    me=et.tm_mon
    ye=et.tm_year

    log = logging.getLogger(__name__)
    log.debug('%d/%d/%d -> %d/%d/%d', d,m,y,de,me,ye)

    try :
        telescope=self.cameratypes[camera.lower()]
    except KeyError:
        telescope=''

    searchdat = {
        'sort1':'completetime',
        'sort1order':'desc',
        'searchearliestcom[]':[d, m, y, str(hour),str(minute)],
        'searchlatestcom[]':  [de,me,ye,str(hour),str(minute)],
        'searchstatus[]':['1'],
        'resultsperpage':'1000',
        'searchfilter':filtertype,
        'searchtelescope':telescope,
        'submit':'Go'
    }

    headers = {'Content-Type': 'application/x-www-form-urlencoded'}


    request = self.s.post(self.url+'v3job-search-query.php',
                     data=searchdat, headers=headers)
    soup = BeautifulSoup(request.text,'lxml')

    jlst=[]
    for l in soup.findAll('tr'):
        try :
            a=l.find('a').get('href')
        except AttributeError :
            continue
        jid=a.rfind('jid')
        if jid>0 :
            jid=a[jid+4:].split('&')[0]
            jlst.append(int(jid))
    return jlst


# %% ../00_core.ipynb 19
@patch
def get_job(self: Telescope, jid=None):
    '''Get a job data for a given JID'''

    assert(jid is not None)
    assert(self.s is not None)

    log = logging.getLogger(__name__)
    log.debug(jid)

    obs={}
    obs['jid']=jid
    #rq=self.s.post(self.url+('v3cjob-view.php?jid=%d' % jid))
    rq=self.s.post(self.url+('v4request-view.php?jid=%d' % jid))
    soup = BeautifulSoup(rq.text, 'lxml')
    for l in soup.findAll('tr'):
        log.debug(cleanup(l.text))
        txt=''
        for f in l.findAll('td'):
            if txt.find('Request ID') >= 0:
                obs['rid']=f.text            
            if txt.find('Object Type') >= 0:
                obs['type']=f.text
            if txt.find('Object ID') >= 0:
                obs['oid']=f.text
            if txt.find('Telescope Type Name') >= 0:
                obs['tele']=f.text
            if txt.find('Filter Type') >= 0:
                obs['filter']=f.text
            if txt.find('Exposure Time') >= 0:
                obs['exp']=f.text
            if txt.find('Completion Time') >= 0:
                t=f.text.split()
                obs['completion']=t[3:6]+[t[6][1:]]+[t[7][:-1]]
            if txt.find('Status') >= 0:
                obs['status']= (f.text == 'Success')

            txt=f.text
    for l in soup.findAll('button'):
        if l.get('onclick')is not None and ('dl-flat' in l.get('onclick')):
            obs['flatid']=int(l.get('onclick').split('=')[-1][:-1])
            break
    log.info('%(jid)d [%(tele)s, %(filter)s, %(status)s]: %(type)s %(oid)s %(exp)s', obs)

    return obs

# %% ../00_core.ipynb 22
@patch
def do_api_call(self: Telescope, module, req, params=None):
    rq = self.s.post(self.url+"api-user.php", {'module': module,
                                               'request': req,
                                               'params': {} if params is None else json.dumps(params)})
    return json.loads(rq.content)

# %% ../00_core.ipynb 24
@patch
def do_rm_api(self: Telescope, req, params=None):
    return self.do_api_call("request-manager", req, params)


#export
@patch
def do_rc_api(self: Telescope, req, params=None):
    return self.do_api_call("request-constructor", req, params)

# %% ../00_core.ipynb 25
@patch
def download_obs(self: Telescope, obs=None, directory='.', cube=True, verbose=False):
    '''Download the raw observation obs (obtained from get_job) into zip
    file named job_jid.zip located in the directory (current by default).
    Alternatively, when the cube=True the file will be a 3D fits file.
    The name of the file (without directory) is returned.'''

    assert(obs is not None)
    assert(self.s is not None)

    payload = {'jid': obs['jid']}
    if 'flatid' in obs :
        payload['flatid']=obs['flatid']
    
    rsp = self.do_api_call("image-engine", 
                           "0-create-dl" + ("3d" if cube else "zip"), payload)
    ieid = rsp['data']['ieID']

    n=0
    while rsp['status']!='READY' :
        if verbose:
            print(f"{rsp['status']:30}", end='\n')
        time.sleep(2)
        n+=1
        rsp = self.do_api_call("image-engine", "0-is-job-ready", {'ieid':ieid,})
        if n>30:
            raise TimeoutError
    
    if verbose:
        print(f"{rsp['status']:30}")
        sys.stdout.flush()
    
    rq=self.s.get(self.url+f'v3image-download.php?jid={obs["jid"]}&ieid={ieid}', 
                  stream=True)

    fn = ('%(jid)d.' % obs) + ('fits' if cube else 'zip')
    siz = int(rsp['data']['fitssize' if cube else 'fitsbzsize'])
    pbar = tqdm(total=siz, unit='iB', unit_scale=True, disable=not verbose)
    with open(os.path.join(directory, fn), 'wb') as fd:
        for chunk in rq.iter_content(512):
            pbar.update(len(chunk))
            fd.write(chunk)
    pbar.close()
    sys.stdout.flush()
    if siz==os.stat(os.path.join(directory, fn)).st_size :
        return fn
    else:
        return None

# %% ../00_core.ipynb 28
@patch
def get_obs(self: Telescope, obs=None, cube=True, recurse=True, verbose=False):
    '''Get the raw observation obs (obtained from get_job) into zip
    file-like object. The function returns ZipFile structure of the
    downloaded data.'''

    assert(obs is not None)
    assert(self.s is not None)

    log = logging.getLogger(__name__)

    fn = ('%(jid)d.' % obs) + ('fits' if cube else 'zip')
    fp = os.path.join(self.cache,fn[0],fn[1],fn)
    if not os.path.isfile(fp) :
        log.info('Getting %s from server', fp)
        os.makedirs(os.path.dirname(fp), exist_ok=True)
        self.download_obs(obs, os.path.dirname(fp), cube, verbose)
    else :
        log.info('Getting %s from cache', fp)
    content = open(fp,'rb')
    try :
        return content if cube else ZipFile(content)
    except BadZipFile :
        # Probably corrupted download. Try again once.
        content.close()
        os.remove(fp)
        if recurse :
            return self.get_obs(obs, cube, False, verbose)
        else :
            return None

# %% ../00_core.ipynb 31
@patch
def submit_job_api(self: Telescope, obj, exposure=30000, tele='COAST',
                    filt='BVR', darkframe=True,
                    name='RaDec object', comment='AutoSubmit'):
    assert(self.s is not None)

    log = logging.getLogger(__name__)

    ra=obj.ra.to_string(unit='hour', sep=':', pad=True, precision=2,
                        alwayssign=False)
    dec=obj.dec.to_string(sep=':', pad=True, precision=2,
                        alwayssign=True)
    try :
        tele=self.cameratypes[tele.lower()]
    except KeyError :
        log.warning('Wrong telescope: %d ; selecting COAST(6)', tele)
        tele=6

    if tele==7 :
        if filt=='BVR' : filt='Colour'
        if filt=='B' : filt='Blue'
        if filt=='V' : filt='Green'
        if filt=='R' : filt='Red'
    if tele==6 :
        if filt=='Colour' : filt='BVR'
        if filt=='Blue' : filt='B'
        if filt=='Green' : filt='V'
        if filt=='Red' : filt='R'

    params = {'telescopeid': tele, 'telescopetype': 2,
              'exposuretime': exposure, 'filtertype': filt,
              'objecttype': 'RADEC', 'objectname': name,
              'objectid': ra+' '+dec, 'usercomments': comment }

    self.do_rc_api("0-rb-clear")

    r = self.do_rc_api("0-rb-set", params)
    log.debug('Req data:%s', r)
    if r['success'] :
        r = self.do_rc_api("0-rb-submit")
        log.debug('Submission data:%s', r)
    if r['success'] :
        return True, r['data']['id']
    else :
        log.warning('Submission error. Status:%s', r['status'])
        return False, r['status']

# %% ../00_core.ipynb 33
@patch
def submit_RADEC_job(self: Telescope, obj, exposure=30000, tele='COAST',
                    filt='BVR', darkframe=True,
                    name='RaDec object', comment='AutoSubmit'):
    assert(self.s is not None)

    log = logging.getLogger(__name__)

    ra=obj.ra.to_string(unit='hour', sep=' ',
                        pad=True, precision=2,
                        alwayssign=False).split()
    dec=obj.dec.to_string(sep=' ',
                        pad=True, precision=2,
                        alwayssign=True).split()
    try :
        tele=self.cameratypes[tele.lower()]
    except KeyError :
        log.warning('Wrong telescope: %d ; selecting COAST(6)', tele)
        tele=6

    if tele==7 :
        if filt=='BVR' : filt='Colour'
        if filt=='B' : filt='Blue'
        if filt=='V' : filt='Green'
        if filt=='R' : filt='Red'
    if tele==6 :
        if filt=='Colour' : filt='BVR'
        if filt=='Blue' : filt='B'
        if filt=='Green' : filt='V'
        if filt=='Red' : filt='R'

    u=self.url+'/request-constructor.php'
    r=self.s.get(u+'?action=new')
    t=self.extract_ticket(r)
    log.debug('GoTo Part 1 (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t,'action':'main-go-part1'})
    t=self.extract_ticket(r)
    log.debug('GoTo RADEC (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t,'action':'part1-go-radec'})
    t=self.extract_ticket(r)
    log.debug('Save RADEC (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t,'action':'part1-radec-save',
                         'raHours':ra[0],
                         'raMins':ra[1],
                         'raSecs':ra[2].split('.')[0],
                         'raFract':ra[2].split('.')[1],
                         'decDegrees':dec[0],
                         'decMins':dec[1],
                         'decSecs':dec[2].split('.')[0],
                         'decFract':dec[2].split('.')[1],
                         'newObjectName':name})
    t=self.extract_ticket(r)
    log.debug('GoTo Part 2 (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t,'action':'main-go-part2'})
    t=self.extract_ticket(r)
    log.debug('Save Telescope (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t,
                            'action':'part2-save',
                            'submittype':'Save',
                            'newTelescopeSelection':tele})
    t=self.extract_ticket(r)
    log.debug('GoTo Part 3 (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t,'action':'main-go-part3'})
    t=self.extract_ticket(r)
    log.debug('Save Exposure (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t,
                            'action':'part3-save',
                            'submittype':'Save',
                            'newExposureTime':exposure,
                            'newDarkFrame': 1 if darkframe else 0,
                            'newFilterSelection':filt,
                            'newRequestComments':comment})
    t=self.extract_ticket(r)
    log.debug('Submit (ticket %s)', t)
    r=self.s.post(u,data={'ticket':t, 'action':'main-submit'})
    return r

# %% ../00_core.ipynb 35
@patch
def submitVarStar(self: Telescope, name, expos=90, filt='BVR',comm='', tele='COAST'):
    o=SkyCoord.from_name(name)
    return self.submit_job_api(o, name=name, comment=comm,
                            exposure=expos*1000, filt=filt, tele=tele)
